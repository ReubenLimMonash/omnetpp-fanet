# Date: 22/05/2022
[General]

[Config FANET_CONV]
description = To test number of packets needed to converge
network = fanet_adhoc_hosts
#record-eventlog = true
sim-time-limit = ${T=10,50,100,500,1000,5000,10000,50000,100000}s
#sim-time-limit = ${T=5000,10000}s
#sim-time-limit = ${T=50000,100000}s
#sim-time-limit = ${T=10}s
#*.numHosts = ${N=5}
#*.numHosts = ${N=3}
*.numHosts = ${N=7}

# ----------- Mobility ---------- #
# GW-node mobility
*.gatewayNode.mobility.typename = "StationaryMobility"
*.gatewayNode.mobility.initialY = ${GY=500}m
#*.gatewayNode.mobility.initialX = ${GX=250}m
#*.gatewayNode.mobility.initialX = ${GX=100}m
*.gatewayNode.mobility.initialX = ${GX=350}m
#*.gatewayNode.mobility.initialZ = ${Z=200}m
#*.gatewayNode.mobility.initialZ = ${Z=100}m
*.gatewayNode.mobility.initialZ = ${Z=300}m
*.gatewayNode.mobility.initFromDisplayString = false

# UAV member(s) mobility
#*.uavRadius = ${R=4}
#*.uavRadius = ${R=2}
*.uavRadius = ${R=6}
*.adhocNode[*].mobility.typename = "StationaryMobility"
*.adhocNode[*].mobility.initialX = ${GX}m + ${R}m * cos(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.initialY = ${GY}m + ${R}m * sin(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.initialZ = ${z=$Z}m
*.adhocNode[*].mobility.initFromDisplayString = false

# GCS mobility
**.GCS.mobility.typename = "StationaryMobility"
**.GCS.mobility.initialX = 0m
**.GCS.mobility.initialY = 500m
**.GCS.mobility.initialZ = 1m
**.GCS.mobility.initFromDisplayString = false

# Bounding box constraint
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1100m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 500m

#**.initFromDisplayString = false

# ---------------- Network Layer --------------------#
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.GCS.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"
# ---------------- Setting up routes and IP ------------------ #
#*.configurator.config = xml("<config><interface hosts='**' address='192.168.0.x' netmask='255.255.255.0'/></config>")
*.configurator.config = xmldoc("fanet_routes.xml")
*.configurator.addStaticRoutes = false
*.configurator.dumpConfig = "routes_dump.xml"
*.configurator.dumpRoutes = true


# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"

# 802.11n
**.wlan[0].opMode = "n(mixed-2.4Ghz)"
**.numAntennas = 1
**.bandwidth = 20MHz
**.centerFrequency = 2.4GHz
**.wlan[*].bitrate = 65Mbps
**.wlan[*].radio.transmitter.modulation = "QAM-64"

# MAC
*.adhocNode[*].wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = 100
#**.queue.packetCapacity = 100 #Limit UAV queue of UDP SINK APP to prevent clog by old packets

# Channel modelling 
#**.wlan[0].radio.transmitter.power = 100mW 
*.GCS.wlan[0].radio.transmitter.power = 10W
*.gatewayNode.wlan[0].radio.transmitter.power = 1W
*.adhocNode[*].wlan[0].radio.transmitter.power = 100mW 
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm
#**.pathloss.typename = "FreeSpacePathLoss"
#**.pathLoss.typename = "NakagamiFading" #default shapeFactor=1
#**.pathLoss.alpha = 2
#**.pathLoss.shapeFactor = 4
**.pathLoss.typename = "LognormalRicianFading"
**.pathLoss.a = 0.1
**.pathLoss.b = 0.00075
**.pathLoss.c = 8
**.pathLoss.alpha_min = 2
**.pathLoss.alpha_max = 3
**.pathLoss.sigma_a = 11.25
**.pathLoss.sigma_b = 0.08
**.pathLoss.K_min = 7.8
**.pathLoss.K_max = 17.5
**.propagation.typename = "ConstantSpeedPropagation"


# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
*.packetSize = ${PS=100} # In bytes
*.sendingRate = ${SR=100} # In ms
# GCS
*.GCS.numApps = 2
*.GCS.app[0].typename = "UdpBasicApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].messageLength = ${PS}byte
*.GCS.app[0].sendInterval = ${SR}ms
*.GCS.app[0].packetName = "CNCData"
#*.GCS.app[0].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] adhocNode[3] adhocNode[4] gatewayNode"
#*.GCS.app[0].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] gatewayNode"
*.GCS.app[0].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] adhocNode[3] adhocNode[4] adhocNode[5] adhocNode[6] gatewayNode"
#*.GCS.app[0].destAddresses = "gatewayNode"
*.GCS.app[0].startTime = 0s
*.GCS.app[0].timeToLive = 255
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.app[1].typename = "UdpSink"
*.GCS.app[1].localPort = 5001

# Gateway
*.gatewayNode.numApps = 2
*.gatewayNode.app[0].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[1].typename = "UdpBasicApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].messageLength = ${PS}byte
*.gatewayNode.app[1].sendInterval = ${SR}ms
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"

# UAVs
*.adhocNode[*].numApps = 2
*.adhocNode[*].app[0].typename = "UdpSink"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[1].typename = "UdpBasicApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].messageLength = ${PS}byte
*.adhocNode[*].app[1].sendInterval = ${SR}ms
*.adhocNode[*].app[1].packetName = "UAVData"
*.adhocNode[*].app[1].destAddresses = "GCS"

# ----------- Recording Data ------------#
**.result-recording-modes = -vector
**.app[*].throughput.result-recording-modes = +vector
*.gatewayNode.wlan[0].radio.minSnir.result-recording-modes = +vector
*.radioMedium.recordCommunicationLog = true

# Storing to CSV File
*.GCS.app[0].csvFileName = "/home/reuben/omnetpp_sim_results/FANET_Conv/Longer/SimTime-" + string(${T}) + "/GCS-App[" + string(ancestorIndex(0)) + "]-Tx.csv"
*.GCS.app[1].csvFileName = "/home/reuben/omnetpp_sim_results/FANET_Conv/Longer/SimTime-" + string(${T}) + "/GCS-App[" + string(ancestorIndex(0)) + "]-Rx.csv"
*.gatewayNode.app[0].csvFileName = "/home/reuben/omnetpp_sim_results/FANET_Conv/Longer/SimTime-" + string(${T}) + "/GW-App[" + string(ancestorIndex(0)) + "]-Rx.csv"
*.gatewayNode.app[1].csvFileName = "/home/reuben/omnetpp_sim_results/FANET_Conv/Longer/SimTime-" + string(${T}) + "/GW-App[" + string(ancestorIndex(0)) + "]-Tx.csv"
*.adhocNode[*].app[0].csvFileName = "/home/reuben/omnetpp_sim_results/FANET_Conv/Longer/SimTime-" + string(${T}) + "/UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[1].csvFileName = "/home/reuben/omnetpp_sim_results/FANET_Conv/Longer/SimTime-" + string(${T}) + "/UAV-" + string(parentIndex()) + "-Tx.csv"


# ----------- Setting up Visualization ---------- #
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.mobilityVisualizer[*].displayVelocities = false
*.visualizer.mobilityVisualizer[*].displayMovementTrails = false
*.visualizer.interfaceTableVisualizer[*].displayInterfaceTables = true
*.visualizer.physicalLinkVisualizer[*].displayLinks = true
*.visualizer.physicalLinkVisualizer[*].packetFilter = "CNCData UAVData GatewayData"

#*.GCS.wlan[0].radio.displayCommunicationRange = true
#*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
#*.adhocNode*.wlan[0].radio.displayInterferenceRange = true
**.wlan[0].radio.displayCommunicationRange = true
*.visualizer.dataLinkVisualizer[*].displayLinks = true
*.visualizer.dataLinkVisualizer[*].packetFilter = "AODV*"
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
#*.visualizer.*.routingTableVisualizer[*].displayRoutingTables = true
#*.visualizer.*.routingTableVisualizer[*].destinationFilter = "*"




