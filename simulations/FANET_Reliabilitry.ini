# Date: 22/05/2022

[Config FANET]
description = Runs each micro-simulation for 10 seconds, sending rate 0.1s
network = OneScalarRadioMedium
#record-eventlog = true
sim-time-limit = 10s

*.numHosts = ${N=5}
*.lastHostIndex = ${i=($N)-1}
# ----------- Mobility ---------- #
# GW-node mobility
*.gatewayNode.mobility.typename = "StationaryMobility"
*.gatewayNode.mobility.initialX = ${GX=500}m
*.gatewayNode.mobility.initialY = ${GY=500..1000 step 100}m
*.gatewayNode.mobility.initialZ = ${Z=20..100 step 20}m
*.gatewayNode.mobility.initFromDisplayString = false

# UAV member(s) mobility
*.adhocNode[0..4].mobility.typename = "StationaryMobility"
# --- Generate the following part using generate_ini.py ---
*.adhocNode[0].mobility.initialX = 502.0m
*.adhocNode[0].mobility.initialY = ${Y0=500.0..1000.0 step 100 ! GY}m
*.adhocNode[1].mobility.initialX = 500.6180339887499m
*.adhocNode[1].mobility.initialY = ${Y1=501.9021130325903..1001.9021130325903 step 100 ! GY}m
*.adhocNode[2].mobility.initialX = 498.3819660112501m
*.adhocNode[2].mobility.initialY = ${Y2=501.1755705045849..1001.1755705045849 step 100 ! GY}m
*.adhocNode[3].mobility.initialX = 498.3819660112501m
*.adhocNode[3].mobility.initialY = ${Y3=498.8244294954151..998.8244294954151 step 100 ! GY}m
*.adhocNode[4].mobility.initialX = 500.6180339887499m
*.adhocNode[4].mobility.initialY = ${Y4=498.0978869674097..998.0978869674097 step 100 ! GY}m
# ------
*.adhocNode[0..4].mobility.initialZ = ${z=$Z}m
*.adhocNode[0..4].mobility.initFromDisplayString = false

# GCS mobility
**.GCS.mobility.typename = "StationaryMobility"
**.GCS.mobility.initialX = 400m
**.GCS.mobility.initialY = 500m
**.GCS.mobility.initialZ = 1m
**.GCS.mobility.initFromDisplayString = false

# Bounding box constraint
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1100m
**.constraintAreaMaxZ = 200m

**.initFromDisplayString = false

# ---------------- Network Layer --------------------#
**.routingApp.typename = "Aodv" # Set routing protocol to Aodv 
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.GCS.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"
# IP 
*.configurator.config = xml("<config><interface hosts='**' address='192.168.0.x' netmask='255.255.255.0'/></config>")

# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"

# 802.11ac
#**.wlan[0].opMode = "ac"
#**.bandName = "5 GHz (20 MHz)"
#**.numAntennas = 1
#**.bandwidth = 20MHz
#**.centerFrequency = 5GHz
#**.wlan[*].bitrate = 65Mbps
#**.wlan[*].radio.transmitter.modulation = "QAM-64"

# 802.11n
**.wlan[0].opMode = "n(mixed-2.4Ghz)"
**.numAntennas = 1
**.bandwidth = 20MHz
**.centerFrequency = 2.4GHz
**.wlan[*].bitrate = 65Mbps
**.wlan[*].radio.transmitter.modulation = "QAM-64"

# 802.11g
#**.wlan[0].opMode = "g(erp)"
#**.wlan[0].bitrate = 54Mbps 
#**.wlan[0].mac.*.rateControl.typename = "AarfRateControl"

# MAC
*.adhocNode[*].wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = 100
#**.queue.packetCapacity = 100 #Limit UAV queue of UDP SINK APP to prevent clog by old packets

# Channel modelling 
#**.wlan[0].radio.transmitter.power = 100mW 
*.GCS.wlan[0].radio.transmitter.power = 10W
*.gatewayNode.wlan[0].radio.transmitter.power = 1W
*.adhocNode[*].wlan[0].radio.transmitter.power = 100mW 
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm
#**.pathloss.typename = "FreeSpacePathLoss"
#**.pathLoss.typename = "NakagamiFading" #default shapeFactor=1
#**.pathLoss.alpha = 2
#**.pathLoss.shapeFactor = 4
**.pathLoss.typename = "LognormalRicianFading"
**.pathLoss.a = 0.1
**.pathLoss.b = 0.00075
**.pathLoss.c = 8
**.pathLoss.alpha_min = 2
**.pathLoss.alpha_max = 3
**.pathLoss.sigma_a = 11.25
**.pathLoss.sigma_b = 0.08
**.pathLoss.K_min = 7.8
**.pathLoss.K_max = 17.5
**.propagation.typename = "ConstantSpeedPropagation"


# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.numApps = 2
*.GCS.app[0].typename = "UdpBasicApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].messageLength = 42byte
*.GCS.app[0].sendInterval = 0.1s
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] adhocNode[3] adhocNode[4] gatewayNode"
#*.GCS.app[0].destAddresses = "gatewayNode"
*.GCS.app[0].startTime = 0s
*.GCS.app[0].timeToLive = 255
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.app[1].typename = "UdpSink"
*.GCS.app[1].localPort = 5001

# Gateway
*.gatewayNode.numApps = 2
*.gatewayNode.app[0].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[1].typename = "UdpBasicApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].messageLength = 212byte
*.gatewayNode.app[1].sendInterval = 0.1s
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"

# UAVs
*.adhocNode[*].numApps = 2
*.adhocNode[*].app[0].typename = "UdpSink"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[1].typename = "UdpBasicApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].messageLength = 212byte
*.adhocNode[*].app[1].sendInterval = 0.1s
*.adhocNode[*].app[1].packetName = "UAVData"
*.adhocNode[*].app[1].destAddresses = "GCS"

# ----------- Recording Data ------------#
**.result-recording-modes = -vector
**.app[*].throughput.result-recording-modes = +vector
*.gatewayNode.wlan[0].radio.minSnir.result-recording-modes = +vector
*.radioMedium.recordCommunicationLog = true

# Storing to CSV File
*.GCS.app[0].csvFileName = "simulations\\FANET\\NumMember-" + string(${N}) + "\\Height-" + string(${Z}) + "\\Distance-" + string(${GY}) + "\\GCS-App[" + string(ancestorIndex(0)) + "]-Tx.csv"
*.GCS.app[1].csvFileName = "simulations\\FANET\\NumMember-" + string(${N}) + "\\Height-" + string(${Z}) + "\\Distance-" + string(${GY}) + "\\GCS-App[" + string(ancestorIndex(0)) + "]-Rx.csv"
*.gatewayNode.app[0].csvFileName = "simulations\\FANET\\NumMember-" + string(${N}) + "\\Height-" + string(${Z}) + "\\Distance-" + string(${GY}) + "\\GW-App[" + string(ancestorIndex(0)) + "]-Rx.csv"
*.gatewayNode.app[1].csvFileName = "simulations\\FANET\\NumMember-" + string(${N}) + "\\Height-" + string(${Z}) + "\\Distance-" + string(${GY}) + "\\GW-App[" + string(ancestorIndex(0)) + "]-Tx.csv"
*.adhocNode[*].app[0].csvFileName = "simulations\\FANET\\NumMember-" + string(${N}) + "\\Height-" + string(${Z}) + "\\Distance-" + string(${GY}) + "\\UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[1].csvFileName = "simulations\\FANET\\NumMember-" + string(${N}) + "\\Height-" + string(${Z}) + "\\Distance-" + string(${GY}) + "\\UAV-" + string(parentIndex()) + "-Tx.csv"
#*.gatewayNode.mobility.csvFileName = "simulations\\FANET\\NumMember-" + string(${N}) + "\\Height-" + string(${Z}) + "\\Distance-" + string(${GY}) + "\\GCS-Mobility.csv"
#*.adhocNode[*].mobility.csvFileName = "simulations\\FANET\\NumMember-" + string(${N}) + "\\Height-" + string(${Z}) + "\\Distance-" + string(${GY}) + "\\UAV-" + string(parentIndex()) + "-Mobility.csv"
#*.gatewayNode.mobility.csvUpdateInterval = 0.1s
#*.adhocNode[*].mobility.csvUpdateInterval = 0.1s

# ----------- Setting up Visualization ---------- #
*.visualizer.*.mobilityVisualizer[*].displayVelocities = false
*.visualizer.*.mobilityVisualizer[*].displayMovementTrails = false
*.visualizer.*.interfaceTableVisualizer[*].displayInterfaceTables = true
*.visualizer.*.physicalLinkVisualizer[*].displayLinks = true
*.visualizer.*.physicalLinkVisualizer[*].packetFilter = "CNCData UAVData GatewayData"
#*.GCS.wlan[0].radio.displayCommunicationRange = true
#*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
#*.adhocNode*.wlan[0].radio.displayInterferenceRange = true
**.wlan[0].radio.displayCommunicationRange = true
*.visualizer.*.dataLinkVisualizer[*].displayLinks = true
*.visualizer.*.dataLinkVisualizer[*].packetFilter = "AODV*"
*.visualizer.*.networkRouteVisualizer[*].displayRoutes = true

[Config Static_Routing]
description = Setup static routing
extends = FANET

