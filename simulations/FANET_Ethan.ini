#Author: Ethan Lau
#Date: 04/07/21

[Config Mobility2D]
description = Nodes move with Gauss Markov Mobility 
network = OneScalarRadioMedium
#record-eventlog = true
sim-time-limit = 25s

*.numHosts = 5

**.routingApp.typename = "Aodv" # Set routing protocol to Aodv 
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"

#*.baseStation.wlan[0].mgmt.ssid = "FANET"

#*.gatewayNode.numWlanInterfaces = 2
#*.gatewayNode.forwarding = true
#*.gatewayNode.wlan[*].typename = "Ieee80211Interface"
#*.gatewayNode.wlan[1].mgmt.typename = "Ieee80211MgmtAdhoc"
#*.gatewayNode.wlan[1].agent.typename = ""
#*.gatewayNode.wlan[0].mgmt.typename = "Ieee80211MgmtSta"
#*.gatewayNode.wlan[0].agent.typename = "Ieee80211AgentSta"
#*.gatewayNode.wlan[0].agent.defaultSsid = "FANET"

# ----------- Mobility ---------- #
# UAV mobility
**.adhocNode[*].mobility.typename = "GaussMarkovMobility"
**.adhocNode[*].mobility.alpha = 0.5
**.adhocNode[*].mobility.speed = 20mps
**.adhocNode[*].mobility.speedStdDev = 2mps
**.adhocNode[*].mobility.angleStdDev = 10deg
**.adhocNode[*].mobility.margin = 0m

# GW-node mobility
**.gatewayNode.mobility.typename = "StationaryMobility"
**.gatewayNode.mobility.initialX = 500m
**.gatewayNode.mobility.initialY = 500m
**.gatewayNode.mobility.initialZ = 100m 
**.gatewayNode.mobility.initFromDisplayString = false

# Base Station mobility
#**.baseStation.mobility.typename = "StationaryMobility"
#**.baseStation.mobility.initialX = 500m
#**.baseStation.mobility.initialY = 500m
#**.baseStation.mobility.initialZ = 1m
#**.baseStation.mobility.initFromDisplayString = false

# Bounding box constraint
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 200m

**.initFromDisplayString = false

# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"

# 802.11ac
#**.wlan[0].opMode = "ac"
#**.bandName = "5 GHz (20 MHz)"
#**.numAntennas = 1
#**.bandwidth = 20MHz
#**.centerFrequency = 5GHz
#**.wlan[*].bitrate = 65Mbps
#**.wlan[*].radio.transmitter.modulation = "QAM-64"

# 802.11n
#**.wlan[0].opMode = "n(mixed-2.4Ghz)"
#**.numAntennas = 1
#**.bandwidth = 20MHz
#**.centerFrequency = 2.4GHz
#**.wlan[*].bitrate = 65Mbps
#*.adhocNode[*].wlan[*].radio.transmitter.modulation = "QAM-64"

# 802.11g
**.wlan[0].opMode = "g(erp)"
**.wlan[0].bitrate = 54Mbps 
#**.wlan[0].mac.*.rateControl.typename = "AarfRateControl"

*.adhocNode[*].wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = 100
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"
#**.queue.packetCapacity = 100 #Limit UAV queue of UDP SINK APP to prevent clog by old packets

# Channel modelling
**.wlan[0].radio.transmitter.power = 10mW 
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm
#**.pathloss.typename = "FreeSpacePathLoss"
**.pathLoss.typename = "NakagamiFading" #default shapeFactor=1
**.pathLoss.shapeFactor = 4
**.propagation.typename = "ConstantSpeedPropagation"

# ----------- Setting up IP layer ---------- #
# IP 
*.configurator.config = xml("<config><interface hosts='**' address='192.168.0.x' netmask='255.255.255.0'/></config>")
#*.configurator.config = xmldoc("FANET.xml")

# ----------- Setting up IP Application ---------- #
# Flow 1 Application (UDP Sink and Source with CBR) 
# Gateway
*.gatewayNode.numApps = 1
*.gatewayNode.app[0].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 9

## Member UAVs
#*.adhocNode[*].numApps = 2
#*.adhocNode[*].app[0].typename = "UdpBasicApp"
#*.adhocNode[*].app[0].destAddresses = "gatewayNode"
#*.adhocNode[*].app[0].startTime = uniform(5s,6s)
#*.adhocNode[*].app[0].packetName = "UDPData-"
#*.adhocNode[*].app[0].destPort = 9
#*.adhocNode[*].app[0].localPort = 5000
#*.adhocNode[*].app[0].messageLength = 1024byte
#*.adhocNode[*].app[0].stopTime = 20s
#*.adhocNode[*].app[0].sendInterval = exponential(12ms)
#
#*.adhocNode[*].app[1].typename = "UdpSink"
#*.adhocNode[*].app[1].localPort = 9

## Flow 2 Application (Broadcast CNC messages to UAV nodes)
#*.gatewayNode.app[1].typename = "UdpBasicApp"
#*.gatewayNode.app[1].localPort = 5000
#*.gatewayNode.app[1].destPort = 5000
#*.gatewayNode.app[1].messageLength = 1024byte
#*.gatewayNode.app[1].sendInterval = 1ms
#*.gatewayNode.app[1].packetName = "CNCData"
#*.gatewayNode.app[1].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] adhocNode[3] adhocNode[4]"
#*.gatewayNode.app[1].startTime = uniform(5s,6s)
#*.gatewayNode.ipv4.ip.directBroadcastInterfaces = "wlan0"
#
#*.adhocNode[*].app[1].typename = "UdpSink"
#*.adhocNode[*].app[1].localPort = 5000
#*.adhocNode[*].app[1].receiveBroadcast = true

# ----------- Setting up Visualization ---------- #
*.visualizer.*.mobilityVisualizer.displayVelocities = false
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.*.physicalLinkVisualizer.displayLinks = true
*.visualizer.*.physicalLinkVisualizer.packetFilter = "UDPData*"
*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
*.adhocNode*.wlan[0].radio.displayInterferenceRange = true

# ===================================================================================== # 
[Config QoS]
description = QoS enabled
network = OneScalarRadioMedium
sim-time-limit = 6s
seed-set = 1

# -------------------- Simulation Parameters ---------------- # 
*.numHosts = ${N=5,10,20,30,40}

**.osgModel = "3d/drone.ive.100.scale.0,0,90.rot"
**.result-recording-modes = -vector
**.app[*].throughput.result-recording-modes = +vector
*.gatewayNode.wlan[0].radio.minSnir.result-recording-modes = +vector
*.radioMedium.recordCommunicationLog = true

# -------------------- Physical Layer ---------------------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"

**.wlan[0].radio.transmitter.power = 100mW 
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm
#**.pathloss.typename = "FreeSpacePathLoss"
**.pathLoss.typename = "NakagamiFading" #default shapeFactor=1
**.pathLoss.alpha = 2
**.pathLoss.shapeFactor = 4
**.propagation.typename = "ConstantSpeedPropagation"

# 802.11ac
#**.wlan[0].opMode = "ac"
#**.bandName = "5 GHz (20 MHz)"
#**.numAntennas = 1
#**.bandwidth = 20MHz
#**.centerFrequency = 5GHz
#**.wlan[*].bitrate = 65Mbps
#**.wlan[*].radio.transmitter.modulation = "QAM-64"

# 802.11n
#**.wlan[0].opMode = "n(mixed-2.4Ghz)"
#**.numAntennas = 1
#**.bandwidth = 20MHz
#**.centerFrequency = 2.4GHz
#**.wlan[*].bitrate = 65Mbps
#*.adhocNode[*].wlan[*].radio.transmitter.modulation = "QAM-64"

# 802.11g
**.wlan[0].opMode = "g(erp)"
**.wlan[0].bitrate = 54Mbps 
#**.wlan[0].mac.*.rateControl.typename = "AarfRateControl"

# ----------- Mobility and 3D Scene ----------------#
# ----------- Setting up 3D Visualization ---------- #
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 1000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 1000m

# Bounding box constraint
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 200m

# GW-node mobility
**.gatewayNode.mobility.typename = "StationaryMobility"
**.gatewayNode.mobility.initialX = 500m
**.gatewayNode.mobility.initialY = 500m
**.gatewayNode.mobility.initialZ = 100m 
**.gatewayNode.mobility.initFromDisplayString = false

#*.adhocNode[*].mobility.typename = "MassMobility"
#*.adhocNode[*].mobility.changeInterval = 1s
#*.adhocNode[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
#*.adhocNode[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
#*.adhocNode[*].mobility.angleDelta = uniform(-10deg,10deg)
#*.adhocNode[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
#*.adhocNode[*].mobility.speed = uniform(10mps,20mps)
#*.adhocNode[*].mobility.faceForward = false
#*.adhocNode[*].mobility.initialX = uniform(400m, 600m)
#*.adhocNode[*].mobility.initialY = uniform(400m,600m)
#*.adhocNode[*].mobility.initialZ = 100m

*.adhocNode[*].mobility.typename = "RandomWaypointMobility"
# uniform(400m, 600m)
# uniform(1mps,5mps)
*.adhocNode[*].mobility.initialX = parentIndex()*5m + 500m
*.adhocNode[*].mobility.initialY = parentIndex()*5m + 500m
*.adhocNode[*].mobility.initialZ = 100m
*.adhocNode[*].mobility.speed = 5mps
*.adhocNode[*].mobility.initFromDisplayString = false

#*.adhocNode[*].mobility.typename = "StationaryMobility"
#*.adhocNode[*].mobility.initialX = uniform(300m,700m)
#*.adhocNode[*].mobility.initialY = uniform(300m,700m)
#*.adhocNode[*].mobility.initialZ = 100m
#*.adhocNode[*].mobility.initFromDisplayString = false

# ----------- Setting up 3D Mobility Visualization ---------- #
# ----------- Setting up Visualization ---------- #
*.visualizer.*.mobilityVisualizer.displayVelocities = false
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.*.physicalLinkVisualizer.displayLinks = true

*.visualizer.*.infoVisualizer.modules = "**.wlan[*].mac.dcf.channelAccess.contention"
*.visualizer.*.infoVisualizer.format = "%t"
*.visualizer.*.infoVisualizer.placementHint = "topCenter"
*.visualizer.*.infoVisualizer.placementPriority = -10

*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 1

# ---------------- MAC Layer ------------------------#
*.adhocNode[*].wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = 100

# ---------------- Network Layer --------------------#
**.routingApp.typename = "Aodv" # Set routing protocol to Aodv 
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"
*.configurator.config = xml("<config><interface hosts='**' address='192.168.0.x' netmask='255.255.255.0'/></config>")

# ---------------- Application --------------------- #
*.gatewayNode.numApps = 2
*.gatewayNode.app[*].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 21
*.gatewayNode.app[1].localPort = 4000
#*.adhocNode[*].app[0].stopTime = 300s

# Medium Contention - Node 1-5 active
# High Contention - All nodes active
*.adhocNode[0].numApps = 1 # Change this for contention
*.adhocNode[*].app[0].typename = "UdpBasicApp"
*.adhocNode[*].app[0].packetName = "AdHocNode-" + string(parentIndex()) + "-"
*.adhocNode[*].app[0].destAddresses = "gatewayNode"
*.adhocNode[*].app[0].timeToLive = 255

*.gatewayNode.app[*].csvFileName = "simulations\\80211g\\54Mbps\\Video-10Mbps\\NoContention\\RWPM-" + string(${N}) + "-App[" + string(ancestorIndex(0)) + "]-Rx.csv"
*.adhocNode[*].mobility.csvFileName = "simulations\\80211g\\54Mbps\\Video-10Mbps\\NoContention\\RWPM-" + string(${N}) + "-" + string(parentIndex()) + "-Mobility.csv"
*.adhocNode[*].mobility.csvUpdateInterval = 0.5s
*.adhocNode[*].app[0].csvFileName = "simulations\\80211g\\54Mbps\\Video-10Mbps\\NoContention\\RWPM-" + string(${N}) + "-" + string(parentIndex()) + "-Tx.csv"

# 5Mbps - sendInterval = normal(1ms, 10us)
# 10Mbps - sendInterval = normal(500us, 10us)
# High priority data stream - 5Mbps
*.adhocNode[0].app[0].destPort = 4000 
*.adhocNode[0].app[0].messageLength = 600B
*.adhocNode[0].app[0].sendInterval = normal(500us, 10us) 
*.adhocNode[0].app[0].startTime = 1s
*.adhocNode[*].app[0].stopTime = 600s
*.adhocNode[*].app[0].localPort = 5000

# Low priority data streams - 24Mbps
#*.adhocNode[1..].app[0].destPort = 21
#*.adhocNode[1..].app[0].messageLength = 900B
#*.adhocNode[1..].app[0].sendInterval = normal(300us, 10us)

# Low priority data streams - 5Mbps
*.adhocNode[1..].app[0].destPort = 21
*.adhocNode[1..].app[0].messageLength = 600B
*.adhocNode[1..].app[0].sendInterval = normal(500us, 10us)
#*.adhocNode[*].app[0].startTime = parentIndex()*10s
*.adhocNode[1..].app[0].startTime = 1s
*.adhocNode[1..].app[0].stopTime = 600s

#=============================================================================#
[Config DBA]
description = Simulation to collect dataset 
network = OneScalarRadioMedium
#record-eventlog = true
sim-time-limit = 10s

*.numHosts = 5

**.routingApp.typename = "Aodv" # Set routing protocol to Aodv 
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"

# ----------- Mobility ---------- #
# UAV mobility
**.adhocNode[0..1].mobility.typename = "StationaryMobility"
*.adhocNode[0].mobility.initialX = 200m
*.adhocNode[0].mobility.initialY = 600m
*.adhocNode[0].mobility.initialZ = 100m
*.adhocNode[1].mobility.initialX = 800m
*.adhocNode[1].mobility.initialY = 600m
*.adhocNode[1].mobility.initialZ = 100m

*.adhocNode[2..4].mobility.typename = "LinearMobility"
*.adhocNode[2].mobility.initialX = 500m
*.adhocNode[2].mobility.initialY = 400m
*.adhocNode[2].mobility.initialZ = 100m
*.adhocNode[3].mobility.initialX = 200m
*.adhocNode[3].mobility.initialY = 400m
*.adhocNode[3].mobility.initialZ = 100m
*.adhocNode[4].mobility.initialX = 800m
*.adhocNode[4].mobility.initialY = 400m
*.adhocNode[4].mobility.initialZ = 100m
*.adhocNode[2..4].mobility.initialMovementHeading = 270deg
*.adhocNode[2..4].mobility.speed = 2mps

# GW-node mobility
**.gatewayNode.mobility.typename = "StationaryMobility"
**.gatewayNode.mobility.initialX = 500m
**.gatewayNode.mobility.initialY = 600m
**.gatewayNode.mobility.initialZ = 100m
**.gatewayNode.mobility.initFromDisplayString = false

# Base Station mobility
#**.baseStation.mobility.typename = "StationaryMobility"
#**.baseStation.mobility.initialX = 500m
#**.baseStation.mobility.initialY = 500m
#**.baseStation.mobility.initialZ = 1m
#**.baseStation.mobility.initFromDisplayString = false

# Bounding box constraint
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 200m

**.initFromDisplayString = false

# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].opMode = "g(erp)"
**.wlan[0].bitrate = 54Mbps 
#**.wlan[0].mac.*.rateControl.typename = "AarfRateControl"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"
#**.queue.packetCapacity = 10 #Limit UAV queue of UDP SINK APP to prevent clog by old packets

# Channel modelling	
**.wlan[0].radio.transmitter.power = 100mW 
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm
#**.pathloss.typename = "FreeSpacePathLoss"
**.pathLoss.typename = "NakagamiFading" #default shapeFactor=1
**.propagation.typename = "ConstantSpeedPropagation"

# ----------- Setting up IP layer ---------- #
# IP 
*.configurator.config = xml("<config><interface hosts='**' address='192.168.0.x' netmask='255.255.255.0'/></config>")
#*.configurator.config = xmldoc("FANET.xml")

# ----------- Setting up IP Application ---------- #
# Flow 1 Application (UDP Sink and Source with CBR) 
# Gateway
*.gatewayNode.numApps = 1
*.adhocNode[*].numApps = 1
*.gatewayNode.app[0].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 9
*.adhocNode[0..1].app[0].typename = "UdpSink"
*.adhocNode[0..1].app[0].localPort = 9

# Member UAVs
*.adhocNode[2..4].app[0].typename = "UdpBasicApp"
*.adhocNode[2].app[0].destAddresses = "gatewayNode"
*.adhocNode[3].app[0].destAddresses = "adhocNode[0]"
*.adhocNode[4].app[0].destAddresses = "adhocNode[1]"
*.adhocNode[2..4].app[0].startTime = uniform(1s,2s)
*.adhocNode[2].app[0].packetName = "UDPDataMain-"
*.adhocNode[3].app[0].packetName = "UDPDataPair1-"
*.adhocNode[4].app[0].packetName = "UDPDataPair2-"
*.adhocNode[2..4].app[0].destPort = 9
*.adhocNode[2..4].app[0].localPort = 5000
*.adhocNode[2..4].app[0].messageLength = 1024byte
*.adhocNode[2..4].app[0].stopTime = 300s
*.adhocNode[2..4].app[0].sendInterval = 1ms

## Flow 2 Application (Broadcast CNC messages to UAV nodes)
#*.gatewayNode.app[1].typename = "UdpBasicApp"
#*.gatewayNode.app[1].localPort = 5000
#*.gatewayNode.app[1].destPort = 5000
#*.gatewayNode.app[1].messageLength = 1024byte
#*.gatewayNode.app[1].sendInterval = 1ms
#*.gatewayNode.app[1].packetName = "CNCData"
#*.gatewayNode.app[1].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] adhocNode[3] adhocNode[4]"
#*.gatewayNode.app[1].startTime = uniform(5s,6s)
#*.gatewayNode.ipv4.ip.directBroadcastInterfaces = "wlan0"
#
#*.adhocNode[*].app[1].typename = "UdpSink"
#*.adhocNode[*].app[1].localPort = 5000
#*.adhocNode[*].app[1].receiveBroadcast = true

# ----------- Setting up Visualization ---------- #
*.visualizer.*.mobilityVisualizer.displayVelocities = false
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.*.physicalLinkVisualizer.displayLinks = true
*.visualizer.*.physicalLinkVisualizer.packetFilter = "UDPData*"
*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
*.adhocNode*.wlan[0].radio.displayInterferenceRange = true

# ============================================================================ #
# ============================== 3D Mobility ================================= #
# ============================================================================ #
[Config Spiral]
description = UAVs move in spirals around the GW-node
extends = Mobility2D

# ----------- Setting up 3D Visualization ---------- #
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 1000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 1000m

# ----------- Setting up 3D mobility ---------- #
*.adhocNode[*].mobility.typename = "SuperpositioningMobility"
*.adhocNode[*].mobility.numElements = 2
*.adhocNode[*].mobility.orientationComposition = "faceForward"
*.adhocNode[*].mobility.element[0].typename = "LinearMobility"
*.adhocNode[*].mobility.element[0].initialX = 0m
*.adhocNode[*].mobility.element[0].initialY = 0m
*.adhocNode[0].mobility.element[0].initialZ = 50m
*.adhocNode[1].mobility.element[0].initialZ = 60m
*.adhocNode[2].mobility.element[0].initialZ = 70m
*.adhocNode[3].mobility.element[0].initialZ = 80m
*.adhocNode[4].mobility.element[0].initialZ = 90m
*.adhocNode[*].mobility.element[0].initFromDisplayString = false
*.adhocNode[*].mobility.element[0].initialMovementElevation = 90deg
*.adhocNode[*].mobility.element[0].speed = 5mps
*.adhocNode[*].mobility.element[1].typename = "CircleMobility"
*.adhocNode[*].mobility.element[1].cx = 500m
*.adhocNode[*].mobility.element[1].cy = 500m
*.adhocNode[*].mobility.element[1].r = 200m
*.adhocNode[0].mobility.element[1].startAngle = 0deg
*.adhocNode[1].mobility.element[1].startAngle = 72deg
*.adhocNode[2].mobility.element[1].startAngle = replaceUnit(2*72,"deg")
*.adhocNode[3].mobility.element[1].startAngle = replaceUnit(3*72,"deg")
*.adhocNode[4].mobility.element[1].startAngle = replaceUnit(4*72,"deg")

#*.adhocNode[0..4].mobility.element[1].startAngle = replaceUnit ((index()*72),"deg")
*.adhocNode[*].mobility.element[1].speed = 20mps

**.osgModel = "3d/drone.ive.100.scale.0,0,90.rot"

# ----------- Setting up 3D Mobility Visualization ---------- #
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 1

#####################################################################################
[Config MassMobility]
description = UAVs move with Mass Mobility model
extends = Mobility2D
sim-time-limit = 200s

#**.radioMedium.typename = "UnitDiskRadioMedium"
#**.wlan[0].radio.typename = "Ieee80211UnitDiskRadio"
#**.radio.transmitter.communicationRange = 200m
#**.radio.transmitter.interferenceRange = 400m

*.numHosts = ${N=5,10,20,30,40}

**.osgModel = "3d/drone.ive.100.scale.0,0,90.rot"

*.adhocNode[*].app[0].destAddresses = "gatewayNode"
**.wlan[0].radio.transmitter.power = 100mW 
*.adhocNode[*].app[0].stopTime = 200s
*.adhocNode[*].app[0].timeToLive = 255

*.adhocNode[*].app[0].sendInterval = 10ms

# ----------- Setting up 3D Visualization ---------- #
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 1000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 1000m

#*.adhocNode[*].mobility.typename = "MassMobility"
#*.adhocNode[*].mobility.changeInterval = 1s
#*.adhocNode[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
#*.adhocNode[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
#*.adhocNode[*].mobility.angleDelta = uniform(-10deg,10deg)
#*.adhocNode[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
#*.adhocNode[*].mobility.speed = uniform(10mps,20mps)
#*.adhocNode[*].mobility.faceForward = false
#*.adhocNode[*].mobility.initialX = uniform(400m, 600m)
#*.adhocNode[*].mobility.initialY = uniform(400m,600m)
#*.adhocNode[*].mobility.initialZ = 100m

*.adhocNode[*].mobility.typename = "RandomWaypointMobility"
*.adhocNode[*].mobility.initialX = uniform(400m,600m)
*.adhocNode[*].mobility.initialY = uniform(400m,600m)
*.adhocNode[*].mobility.initialZ = 100m
*.adhocNode[*].mobility.speed = uniform(1mps,5mps)
*.adhocNode[*].mobility.initFromDisplayString = false

#*.adhocNode[*].mobility.typename = "StationaryMobility"
#*.adhocNode[*].mobility.initialX = uniform(300m,700m)
#*.adhocNode[*].mobility.initialY = uniform(300m,700m)
#*.adhocNode[*].mobility.initialZ = 100m
#*.adhocNode[*].mobility.initFromDisplayString = false

# ----------- Setting up 3D Mobility Visualization ---------- #
*.visualizer.*.infoVisualizer.modules = "**.wlan[*].mac.dcf.channelAccess.contention"
*.visualizer.*.infoVisualizer.format = "%t"
*.visualizer.*.infoVisualizer.placementHint = "topCenter"
*.visualizer.*.infoVisualizer.placementPriority = -10

*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 1

#####################################################################################
[Config ApskRadio]

#repeat = 1000
network = ApskScalarRadioMedium
sim-time-limit = 10s

*.numHosts = 5
#**.routingApp.typename = "Aodv" # Set routing protocol to Aodv 
**.ipv4.arp.typename = "GlobalArp"

# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "WirelessInterface"
**.radioMedium.typename = "ApskScalarRadioMedium"
**.radioMedium.backgroundNoise.power = -86dBm
**.radioMedium.mediumLimitCache.centerFrequency = 2.412GHz

# ---------------- Mac layer ---------------- #
**.wlan[0].mac.typename = "AckingMac"
**.wlan[0].mac.useAck = false
**.wlan[0].mac.headerLength = 23B
**.bitrate = 18Mbps

# -------------- Radio settings --------------#
**.wlan[0].radio.typename = "ApskScalarRadio"
**.wlan[0].radio.centerFrequency = 2GHz
**.wlan[0].radio.bandwidth = 2MHz
*.gatewayNode.wlan[0].radio.transmitter.power = 10mW
*.adhocNode[0].wlan[0].radio.transmitter.power = 10mW
*.adhocNode[1..4].wlan[0].radio.transmitter.power = 1mW
**.wlan[0].radio.transmitter.preambleDuration = 10us
**.wlan[0].radio.transmitter.headerLength = 8B

**.wlan[0].radio.receiver.sensitivity = -85dBm
**.wlan[0].radio.receiver.energyDetection = -85dBm
**.wlan[0].radio.receiver.snirThreshold = 4dB

**.wlan[0].radio.antenna.typename = "ConstantGainAntenna"
**.wlan[0].radio.antenna.gain = 3dB

# Channel modelling
**.pathLoss.typename = "LogNormalShadowing" #default shapeFactor=1
*.physicalEnvironment.ground.typename = "FlatGround"

# ----------- Setting up IP layer ---------- #
# IP 
*.configurator.config = xml("<config><interface hosts='**' address='192.168.0.x' netmask='255.255.255.0'/></config>")
#*.configurator.config = xmldoc("FANET.xml")

# ----------- Setting up IP Application ---------- #
# Flow 1 Application (UDP Sink and Source with CBR) 
# Gateway
*.gatewayNode.numApps = 1
*.gatewayNode.app[0].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 9

# Member UAVs
*.adhocNode[*].numApps = 1
*.adhocNode[0..3].app[0].typename = "UdpBasicApp"
*.adhocNode[0].app[0].destAddresses = "gatewayNode"
*.adhocNode[1..3].app[0].destAddresses = "adhocNode[4]"
*.adhocNode[0..3].app[0].startTime = 0s
*.adhocNode[0].app[0].packetName = "UDPDataMain-"
*.adhocNode[1..3].app[0].packetName = "UDPDataInt-"
*.adhocNode[0].app[0].destPort = 9
*.adhocNode[1..3].app[0].destPort = 10
*.adhocNode[0..3].app[0].localPort = 5000
*.adhocNode[0].app[0].messageLength = 1024byte
*.adhocNode[1..3].app[0].messageLength = 1024byte
*.adhocNode[0..3].app[0].stopTime = 10s
*.adhocNode[0..3].app[0].sendInterval = 1ms

*.adhocNode[4].app[0].typename = "UdpSink"
*.adhocNode[4].app[0].localPort = 10

**.osgModel = "3d/drone.ive.100.scale.0,0,90.rot"

*.adhocNode[1..4].app[0].destAddresses = "adhocNode[0]"
*.adhocNode[0].app[0].destAddresses = "gatewayNode"

# ----------- Setting up 3D Visualization ---------- #
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.clearColor = "skyblue"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImage = "showcases/desert"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 1000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -2000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 3000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 1000m

# ------------- Setting up mobility ------------------#
# Bounding box constraint
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 1000m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 200m

# GW-node mobility
**.gatewayNode.mobility.typename = "LinearMobility"
**.gatewayNode.mobility.initialX = ${distX=100m}
**.gatewayNode.mobility.initialY = ${distY=500m}
**.gatewayNode.mobility.initialZ = 100m
**.gatewayNode.mobility.initialMovementHeading = 0deg
**.gatewayNode.mobility.speed = 20mps
**.initFromDisplayString = false

*.adhocNode[0].mobility.typename = "StationaryMobility"
*.adhocNode[0].mobility.initialX = 75m
*.adhocNode[0].mobility.initialY = 500m
*.adhocNode[0].mobility.initialZ = 100m

*.adhocNode[1..4].mobility.typename = "LinearMobility"
*.adhocNode[1..4].mobility.initialMovementHeading = 0deg
*.adhocNode[1..4].mobility.speed = 20mps
*.adhocNode[1..4].mobility.initialZ = 100m
*.adhocNode[1].mobility.initialX = 50m+${distX}
*.adhocNode[1].mobility.initialY = ${distY}
*.adhocNode[2].mobility.initialX = ${distX}
*.adhocNode[2].mobility.initialY = 50m+${distY}
*.adhocNode[3].mobility.initialX = ${distX}
*.adhocNode[3].mobility.initialY = ${distY}-50m
*.adhocNode[4].mobility.initialX = ${distX}+100m
*.adhocNode[4].mobility.initialY = ${distY}

# ----------- Setting up 3D Mobility Visualization ---------- #
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 1

# ----------- Setting up Visualization ---------- #
*.visualizer.*.mobilityVisualizer.displayVelocities = false
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.*.physicalLinkVisualizer.displayLinks = true
*.visualizer.*.physicalLinkVisualizer.packetFilter = "UDPData*"
*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
*.adhocNode*.wlan[0].radio.displayInterferenceRange = true

#Visualization
*.visualizer.*.numStatisticVisualizers = 1
*.visualizer.*.statisticVisualizer[0].signalName = "packetSentToUpper"
*.visualizer.*.statisticVisualizer[0].statisticExpression = "minimumSnir"
*.visualizer.*.statisticVisualizer[0].sourceFilter = "*.gatewayNode.wlan[*].radio"
*.visualizer.*.statisticVisualizer[0].format = "SNIR: %v"
*.visualizer.*.statisticVisualizer[0].placementHint = "topLeft"

#####################################################################################
[Config MonteCarlo]
description = Experimental Monte Carlo Simulations
extends = ApskRadio

#repeat = 1000

sim-time-limit = 10s

*.adhocNode[*].mobility.typename = "StationaryMobility"
*.gatewayNode.mobility.typename = "StationaryMobility"
# Distance between Gw-node and Tx node = 100m 
# Distance between interfering node and Gw-node = 500m
#*.adhocNode[0].mobility.initialX = 550m
#*.adhocNode[0].mobility.initialY = 500m
#*.adhocNode[0].mobility.initialZ = 100m
#*.adhocNode[1].mobility.initialX = uniform(550m,1000m)
#*.adhocNode[1].mobility.initialY = uniform(550m,1000m)
#*.adhocNode[1].mobility.initialZ = uniform(150m,200m)
#*.adhocNode[2].mobility.initialX = uniform(550m,1000m)
#*.adhocNode[2].mobility.initialY = uniform(550m,1000m)
#*.adhocNode[2].mobility.initialZ = uniform(150m,200m)
#
**.pathLoss.shapeFactor = ${m=4} #Assuming LoS links
#
#*.adhocNode[*].app[0].startTime = 0s
#*.adhocNode[*].app[0].stopTime = 0.1s
#*.adhocNode[1].app[0].destAddresses = "adhocNode[2]"
#*.adhocNode[2].app[0].destAddresses = "adhocNode[1]"
#*.adhocNode[0].app[0].destAddresses = "gatewayNode"
#*.adhocNode[*].app[0].sendInterval = 1s

#####################################################################################
[Config Circle]
description = UAVs move in circles around the GW-node at the same altitude

extends = Mobility2D

*.numHosts = 5
**.wlan[0].bitrate = 48Mbps

*.adhocNode[*].mobility.typename = "CircleMobility"
*.adhocNode[*].mobility.cx = 500m
*.adhocNode[*].mobility.cy = 500m
*.adhocNode[*].mobility.cz = 100m
*.adhocNode[*].mobility.r = replaceUnit((25+parentIndex()*50),"m")
*.adhocNode[0].mobility.speed = 20mps
*.adhocNode[1].mobility.speed = 60mps
*.adhocNode[2].mobility.speed = 100mps
*.adhocNode[3].mobility.speed = 140mps
*.adhocNode[4].mobility.speed = 180mps
*.adhocNode[*].mobility.startAngle = 0
*.adhocNode[*].mobility.initFromDisplayString = false

#####################################################################################
[Config TwoNodes]
description = Demonstrate relaying od AODV
extends = Mobility2D

*.numHosts = 2
**.wlan[0].bitrate = 18Mbps

*.adhocNode[0].mobility.typename = "LinearMobility"
*.adhocNode[0].mobility.initialMovementHeading = 0deg
*.adhocNode[0].mobility.speed = 50mps
*.adhocNode[0].mobility.initialX = 510m
*.adhocNode[0].mobility.initialY = 510m
*.adhocNode[0].mobility.initialZ = 100m
*.adhocNode[0].mobility.initFromDisplayString = false

*.adhocNode[1].mobility.typename = "StationaryMobility"
*.adhocNode[1].mobility.initialX = 700m
*.adhocNode[1].mobility.initialY = 500m
*.adhocNode[1].mobility.initialZ = 100m
*.adhocNode[1].mobility.initFromDisplayString = false

#####################################################################################
[Config SINR_Test_1]
description = Monte Carlo simulations using APSK Scalar Radio
sim-time-limit = 1s
network = ApskScalarRadioMedium
*.numHosts = 4

repeat = 4000

# ARP
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"

# environment and pathloss
**.pathLoss.typename = "NakagamiFading"
**.pathLoss.shapeFactor = ${m=1}
*.physicalEnvironment.ground.typename = "FlatGround"

# mobility
*.gatewayNode.mobility.typename = "StationaryMobility"
*.adhocNode[*].mobility.typename = "StationaryMobility"
**.mobility.initFromDisplayString = false
#**.mobility.initialY = 500m
**.mobility.initialZ = 1.5m
*.adhocNode[0].mobility.initialX = 0m
*.gatewayNode.mobility.initialX = ${X=75}m
*.adhocNode[1].mobility.initialX = ${X}m+100m
*.adhocNode[2].mobility.initialX = ${X}m
*.adhocNode[3].mobility.initialX = ${X}m
*.adhocNode[0].mobility.initialY = ${Y=500m}
*.gatewayNode.mobility.initialY = 500m
*.adhocNode[1].mobility.initialY = 500m
*.adhocNode[2].mobility.initialY = ${Y}-100m
*.adhocNode[3].mobility.initialY = ${Y}+100m

**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 10000m
**.constraintAreaMaxY = 10000m
**.constraintAreaMaxZ = 2m

#Setting up radio 
**.wlan[0].typename = "WirelessInterface"
**.wlan[0].radio.typename = "ApskScalarRadio"
#*.node_*.wlan[0].radio.transmitter.communicationRange = 100m
**.wlan[0].radio.centerFrequency = 2GHz
**.wlan[0].radio.bandwidth = 2MHz
**.wlan[0].radio.transmitter.preambleDuration = 10us
**.wlan[0].radio.transmitter.headerLength = 8B
**.wlan[0].radio.receiver.sensitivity = -85dBm
**.wlan[0].radio.receiver.energyDetection = -85dBm
**.wlan[0].radio.receiver.snirThreshold = 4dB
#------------------Different Tx Power for different nodes---------------
**.wlan[0].radio.transmitter.power = 10mW
#------------------Radio Antenna Gain---------------
**.wlan[0].radio.antenna.typename = "ConstantGainAntenna"
**.wlan[0].radio.antenna.gain = 0dB
#------------------Configure MAC---------------
**.wlan[0].mac.typename = "AckingMac"
**.wlan[0].mac.useAck = false
**.wlan[0].mac.headerLength = 23B

# MAC
#*.*Host*.wlan[*].opMode = "g(erp)"
**.bitrate = 6Mbps
*.radioMedium.backgroundNoise.power = -86dBm

# radio
#*.*Host.wlan[*].radio.transmitter.power = 10mW
#**.receiver.snirThreshold = 0dB
#**.receiver.energyDetection = -85dBm
#**.receiver.sensitivity = -85dBm

# UDP app
*.adhocNode[0].numApps = 1
*.adhocNode[0].app[0].typename = "UdpBasicApp"
*.adhocNode[0].app[0].destAddresses = "gatewayNode"
*.adhocNode[0].app[0].startTime = 0s
*.adhocNode[0].app[0].packetName = "UDPDataMain-"
*.adhocNode[0].app[0].destPort = 5000
*.adhocNode[0].app[0].messageLength = 56byte
*.adhocNode[0].app[0].stopTime = 0.1ms
*.adhocNode[0].app[0].sendInterval = 1s

*.adhocNode[1..3].numApps = 1
*.adhocNode[1..3].app[0].typename = "UdpBasicApp"
*.adhocNode[1..3].app[0].destAddresses = "gatewayNode"
*.adhocNode[1..3].app[0].startTime = 0s
*.adhocNode[1..3].app[0].packetName = "UDPDataInt-"
*.adhocNode[1..3].app[0].destPort = 5000
*.adhocNode[1..3].app[0].messageLength = 56byte
*.adhocNode[1..3].app[0].stopTime = 0.1ms
*.adhocNode[1].app[0].sendInterval = 1s
*.adhocNode[2].app[0].sendInterval = 1s
*.adhocNode[3].app[0].sendInterval = 1s

*.gatewayNode.numApps = 1
*.gatewayNode.app[0].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 5000

#Visualization
#*.*Host.wlan[0].radio.displayCommunicationRange = true
#*.visualizer.mediumVisualizer.displaySignals = true
#*.visualizer.physicalLinkVisualizer.displayLinks = true
#*.visualizer.physicalLinkVisualizer.packetFilter = "UDPData*"

[Config SINR_Test_2]
sim-time-limit = 10s
description = SNIR Test with Linear Mobility
extends = SINR_Test_1
repeat = 1

**.pathLoss.shapeFactor = 4
#Set linear mobility
*.adhocNode[1..3].mobility.typename = "LinearMobility"
*.adhocNode[1..3].mobility.initialMovementHeading = 0deg
*.gatewayNode.mobility.typename = "LinearMobility"
*.gatewayNode.mobility.initialMovementHeading = 0deg
**.mobility.speed = 100mps
#UAV Interferer Tx Power lower than GCS
*.adhocNode[1..3].wlan[0].radio.transmitter.power = 0.1mW
#Increase simulation time
*.adhocNode[0].app[0].stopTime = 10s
*.adhocNode[1..3].app[0].stopTime = 10s
*.adhocNode[0].app[0].sendInterval = 1ms
*.adhocNode[1].app[0].sendInterval = 1ms
*.adhocNode[2].app[0].sendInterval = 1ms
*.adhocNode[3].app[0].sendInterval = 1ms
*.adhocNode[0].app[0].messageLength = 1000byte
*.adhocNode[1..3].app[0].messageLength = 250byte
#Visualization
*.visualizer.*.numStatisticVisualizers = 1
*.visualizer.*.statisticVisualizer[0].signalName = "packetSentToUpper"
*.visualizer.*.statisticVisualizer[0].statisticExpression = "minimumSnir"
*.visualizer.*.statisticVisualizer[0].sourceFilter = "*.gatewayNode.wlan[*].radio"
*.visualizer.*.statisticVisualizer[0].format = "SNIR: %v"
*.visualizer.*.statisticVisualizer[0].placementHint = "topLeft"

*.visualizer.*.dataLinkVisualizer[0].displayLinks = true
*.visualizer.*.packetDropVisualizer[0].displayPacketDrops = true
*.visualizer.*.packetDropVisualizer[0].nodeFilter = "gatewayNode"
*.visualizer.*.packetDropVisualizer[0].labelFormat = "%r"
*.visualizer.*.infoVisualizer[0].displayInfos = true
*.visualizer.*.infoVisualizer[0].modules = "*.destinationHost.app[0]"

#Data collection
**.radio.packetErrorRate.result-recording-modes = +vector
**.radio.bitErrorRate.result-recording-modes = default,+vector
*.destinationHost.wlan[*].radio.minSnir.result-recording-modes = +vector

[Config Topology2]
description = Studying broadcast storm problem
extends = Mobility2D
sim-time-limit = 20s
*.numHosts = 4

**.wlan[0].radio.transmitter.power = 100mW
**.wlan[0].bitrate = 6Mbps 

# ----------- Mobility ---------- #
# UAV mobility
**.adhocNode[*].mobility.typename = "StationaryMobility"
**.adhocNode[*].mobility.initFromDisplayString = false
**.adhocNode[0].mobility.initialX = 500m
**.adhocNode[0].mobility.initialY = 300m
**.adhocNode[0].mobility.initialZ = 100m
**.adhocNode[1].mobility.initialX = 500m
**.adhocNode[1].mobility.initialY = 500m
**.adhocNode[1].mobility.initialZ = 100m
**.adhocNode[2].mobility.initialX = 500m
**.adhocNode[2].mobility.initialY = 700m
**.adhocNode[2].mobility.initialZ = 100m
**.adhocNode[3].mobility.initialX = 500m
**.adhocNode[3].mobility.initialY = 900m
**.adhocNode[3].mobility.initialZ = 100m

# GW-node mobility
**.gatewayNode.mobility.typename = "StationaryMobility"
**.gatewayNode.mobility.initialX = 500m
**.gatewayNode.mobility.initialY = 100m
**.gatewayNode.mobility.initialZ = 100m
**.gatewayNode.mobility.initFromDisplayString = false

# ----------- Setting up IP Application ---------- #
# GCS broadcast messages to all other nodes in the network
# Flow 1 Application (UDP Sink and Source with CBR) 
# Gateway
*.gatewayNode.numApps = 1
*.gatewayNode.app[0].typename = "UdpBasicApp"
*.gatewayNode.app[0].destAddresses = "adhocNode[0]"
*.gatewayNode.app[0].startTime = 5s
*.gatewayNode.app[0].destPort = 5000
*.gatewayNode.app[0].messageLength = 1024byte
*.gatewayNode.app[0].sendInterval = 1ms
*.gatewayNode.app[0].localPort = 9
*.gatewayNode.app[0].packetName = "CNCData-"
*.gatewayNode.app[0].timeToLive = 255
**.ipv4.ip.directBroadcastInterfaces = "wlan0" #Enables broadcasting!
#**.multicastForwarding = true #Enables broadcasting!

# Member UAVs
*.adhocNode[*].numApps = 1
*.adhocNode[*].app[0].typename = "UdpSink"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].startTime = 5s
*.adhocNode[*].app[0].csvFileName = "adhocNode["+ string(parentIndex()) + "].csv"
**.app[0].receiveBroadcast = true
**.forceBroadcast = true