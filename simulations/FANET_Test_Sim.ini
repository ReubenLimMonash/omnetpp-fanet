# Date: 12/01/2023
# This ini script is for testing purposes
[General]

[Config FANET_BN_Test]
description = To test FANET simulation
network = fanet_adhoc_hosts_test
#record-eventlog = true

# ----------- Default / Base parameters -----------------------
*.numPackets = ${NP=1000}
*.numHosts = ${N=3}
*.swarmDistance = ${GX=0}
*.swarmHeight = ${Z=50}
*.uavRadius = ${R=5}
*.packetSize = ${PS=24} # In bytes
*.sendingRate = ${SR=40} # In ms
*.gcsY = ${GY=500} # Y coord of GCS, in m
*.travelDistance = ${D=5} # Distance to travel, in units of 100m
# ----------- Variable parameters -----------------------
#*.numPackets = ${NP=1000} # Number of packets to send every 100 m
#*.numHosts = ${N=1..9 step 2}
##*.swarmDistance = ${GX=0..500 step 100}
#*.swarmDistance = ${GX=0}
#*.swarmHeight = ${Z=5, 50, 120}
#*.uavRadius = ${R=4}
#*.packetSize = ${PS=24, 100..900 step 200, 1144} # In bytes
#*.sendingRate = ${SR=40, 100..1000 step 200} # In ms
#*.gcsY = ${GY=500} # Y coord of GCS, in m
#*.travelDistance = ${D=5} # Distance to travel, in units of 100m
# -------------- For micro-sim ---------------------
sim-time-limit = ${NP}s * ${SR} * 0.001 * ${D} + 10s # For micro-sim, determine the sim time from number of packets and sending rate (plus 10 is extra buffer)11

# ----------- Mobility ---------- #
# GW-node mobility
*.gatewayNode.mobility.typename = "LinearMobility"
*.gatewayNode.mobility.initialY = ${GY}m
*.gatewayNode.mobility.initialX = ${GX}m
*.gatewayNode.mobility.initialZ = ${Z}m
*.gatewayNode.mobility.initFromDisplayString = false
*.gatewayNode.mobility.speed = 100mps * 1000 / ${NP} / ${SR} 
*.gatewayNode.mobility.initialMovementHeading = 0deg

# UAV member(s) mobility
*.adhocNode[*].mobility.typename = "LinearMobility"
*.adhocNode[*].mobility.initialX = ${GX}m + ${R}m * cos(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.initialY = ${GY}m + ${R}m * sin(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.initialZ = ${Z}m
*.adhocNode[*].mobility.initFromDisplayString = false
*.adhocNode[*].mobility.speed = 100mps * 1000 / ${NP} / ${SR} 
*.adhocNode[*].mobility.initialMovementHeading = 0deg

# GCS mobility
**.GCS.mobility.typename = "StationaryMobility"
**.GCS.mobility.initialX = 0m
**.GCS.mobility.initialY = ${GY}m
**.GCS.mobility.initialZ = 0m
**.GCS.mobility.initFromDisplayString = false

# Bounding box constraint
**.constraintAreaMinX = -100m
**.constraintAreaMinY = -100m
**.constraintAreaMinZ = -100m
**.constraintAreaMaxX = 1100m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 500m

#**.initFromDisplayString = false

# ---------------- Network Layer --------------------#
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.GCS.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"
#*.gatewayNode.ipv4.arp.typename = "Arp"
#*.GCS.ipv4.arp.typename = "Arp"
#*.adhocNode[*].ipv4.arp.typename = "Arp"
##*.gatewayNode.ipv4.arp.retryTimeout = 1s
##*.GCS.ipv4.arp.retryTimeout = 1s
##*.adhocNode[*].ipv4.arp.retryTimeout = 1s
##*.gatewayNode.ipv4.arp.retryCount = 1000
##*.GCS.ipv4.arp.retryCount = 1000
##*.adhocNode[*].ipv4.arp.retryCount = 1000
#*.gatewayNode.ipv4.arp.cacheTimeout = 100000s
#*.GCS.ipv4.arp.cacheTimeout = 100000s
#*.adhocNode[*].ipv4.arp.cacheTimeout = 100000s
# ---------------- Setting up routes and IP ------------------ #
#*.configurator.config = xml("<config><interface hosts='**' address='192.168.0.x' netmask='255.255.255.0'/></config>")
*.configurator.config = xmldoc("fanet_routes.xml")
*.configurator.addStaticRoutes = false
*.configurator.dumpConfig = "routes_dump.xml"
*.configurator.dumpRoutes = true

# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"

# 802.11n
**.wlan[0].opMode = "n(mixed-2.4Ghz)"
**.numAntennas = 1
**.bandwidth = 20MHz
**.centerFrequency = 2.4GHz
**.wlan[*].bitrate = 65Mbps
**.wlan[*].radio.transmitter.modulation = "QAM-64"

# MAC
#*.adhocNode[*].wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = 1
#*.GCS.wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = 1
#**.queue.packetCapacity = 100 #Limit UAV queue of UDP SINK APP to prevent clog by old packets
#**.wlan[0].mac.dcf.recoveryProcedure.shortRetryLimit = 1
#**.wlan[0].mac.dcf.recoveryProcedure.longRetryLimit = 1

# Channel modelling 
#**.wlan[0].radio.transmitter.power = 100mW 
*.GCS.wlan[0].radio.transmitter.power = 10W
*.gatewayNode.wlan[0].radio.transmitter.power = 100mW
*.adhocNode[*].wlan[0].radio.transmitter.power = 100mW 
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm
**.pathLoss.typename = "LognormalRicianFading"
**.pathLoss.a = 0.1
**.pathLoss.b = 0.00075
**.pathLoss.c = 8
**.pathLoss.alpha_min = 2
**.pathLoss.alpha_max = 3
**.pathLoss.sigma_a = 11.25
**.pathLoss.sigma_b = 0.08
**.pathLoss.K_min = 7.8
**.pathLoss.K_max = 17.5
**.propagation.typename = "ConstantSpeedPropagation"


# -----------  Application ---------- # 
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.numApps = 2
*.GCS.app[0].typename = "UdpBasicApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].messageLength = uniform(${PS}byte, ${PS}byte + 224byte)
*.GCS.app[0].sendInterval = ${SR}ms
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] gatewayNode" # Just to fill it up, not actually used in this mode
*.GCS.app[0].numMemberUAVs = ${N}
*.GCS.app[0].startTime = 0s
*.GCS.app[0].timeToLive = 255
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.app[1].typename = "UdpSink"
*.GCS.app[1].localPort = 5001
*.GCS.app[1].receiveBroadcast = true

# Gateway
*.gatewayNode.numApps = 2
*.gatewayNode.app[0].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].receiveBroadcast = true
*.gatewayNode.app[1].typename = "UdpBasicApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].messageLength = ${PS}byte
*.gatewayNode.app[1].sendInterval = ${SR}ms
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255

# UAVs
*.adhocNode[*].numApps = 2
*.adhocNode[*].app[0].typename = "UdpSink"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[1].typename = "UdpBasicApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].messageLength = ${PS}byte
*.adhocNode[*].app[1].sendInterval = ${SR}ms
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255

# ----------- Recording Data ------------#
#**.result-recording-modes = -vector
#**.app[*].throughput.result-recording-modes = +vector
#*.gatewayNode.wlan[0].radio.minSnir.result-recording-modes = +vector
*.radioMedium.recordCommunicationLog = true

# Storing to CSV File
# Application level monitoring
#*.GCS.app[*].csvFilePath = "/home/research-student/omnetpp_sim_results/FANET_Corr2"
*.GCS.app[*].csvFilePath = "/home/research-student/omnetpp_sim_results/Testing"
*.GCS.app[0].csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_GCS-Tx.csv"
*.GCS.app[1].csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_GCS-Rx.csv"
#*.gatewayNode.app[*].csvFilePath = "/home/research-student/omnetpp_sim_results/FANET_Corr2"
*.gatewayNode.app[*].csvFilePath = "/home/research-student/omnetpp_sim_results/Testing"
*.gatewayNode.app[0].csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_GW-Rx.csv"
*.gatewayNode.app[1].csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_GW-Tx.csv"
#*.adhocNode[*].app[*].csvFilePath = "/home/research-student/omnetpp_sim_results/FANET_Corr2"
*.adhocNode[*].app[*].csvFilePath = "/home/research-student/omnetpp_sim_results/Testing"
*.adhocNode[*].app[0].csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[1].csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"

# Wlan monitoring mode
*.GCS.wlan[0].radio.receiver.monitorMode = false
*.gatewayNode.wlan[0].radio.receiver.monitorMode = false
*.adhocNode[*].wlan[0].radio.receiver.monitorMode = false
#*.GCS.wlan[0].radio.receiver.csvFilePath = "/home/research-student/omnetpp_sim_results/FANET_Corr2"
*.GCS.wlan[0].radio.receiver.csvFilePath = "/home/research-student/omnetpp_sim_results/Testing"
*.GCS.wlan[0].radio.receiver.csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_GCS-Wlan.csv"
#*.gatewayNode.wlan[0].radio.receiver.csvFilePath = "/home/research-student/omnetpp_sim_results/FANET_Corr2"
*.gatewayNode.wlan[0].radio.receiver.csvFilePath = "/home/research-student/omnetpp_sim_results/Testing"
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_GW-Wlan.csv"
#*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = "/home/research-student/omnetpp_sim_results/FANET_Corr2"
*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = "/home/research-student/omnetpp_sim_results/Testing"
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "NumMember-" + string(${N}) + "_InterUAVDistance-" + string(${R}) + "_Height-" + string(${Z}) + "_Distance-" + string(${GX}) + "_PacketSize-" + string(${PS}) + "_SendingRate-" + string(${SR}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"

# ----------- Setting up Visualization ---------- #
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.mobilityVisualizer[*].displayVelocities = false
*.visualizer.mobilityVisualizer[*].displayMovementTrails = false
*.visualizer.interfaceTableVisualizer[*].displayInterfaceTables = true
*.visualizer.physicalLinkVisualizer[*].displayLinks = true
*.visualizer.physicalLinkVisualizer[*].packetFilter = "CNCData UAVData* GatewayData"

#*.GCS.wlan[0].radio.displayCommunicationRange = true
#*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
#*.adhocNode*.wlan[0].radio.displayInterferenceRange = true
**.wlan[0].radio.displayCommunicationRange = true
*.visualizer.dataLinkVisualizer[*].displayLinks = true
*.visualizer.dataLinkVisualizer[*].packetFilter = "CNCData UAVData* GatewayData"
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
#*.visualizer.*.routingTableVisualizer[*].displayRoutingTables = true
#*.visualizer.*.routingTableVisualizer[*].destinationFilter = "*"

